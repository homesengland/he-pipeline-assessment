{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.forecasts = [];\n    this.title = 'angularapp1.client';\n  }\n  ngOnInit() {\n    this.getForecasts();\n  }\n  getForecasts() {\n    this.http.get('/weatherforecast').subscribe(result => {\n      this.forecasts = result;\n    }, error => {\n      console.error(error);\n    });\n  }\n  static {\n    this.ɵfac = function AppComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 4,\n      vars: 0,\n      consts: [[\"id\", \"tableLabel\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h1\", 0);\n          i0.ɵɵtext(1, \"Weather forecast\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"p\");\n          i0.ɵɵtext(3, \"This component demonstrates fetching data from the server.\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"[_nghost-%COMP%] {\\n    max-width: 1280px;\\n    padding: 2rem;\\n    text-align: center;\\n}\\n\\ntr[_ngcontent-%COMP%]:nth-child(even) {\\n    background: #F2F2F2;\\n}\\n\\ntr[_ngcontent-%COMP%]:nth-child(odd) {\\n    background: #FFF;\\n}\\n\\nth[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n    padding-left: 1rem;\\n    padding-right: 1rem;\\n}\\n\\ntable[_ngcontent-%COMP%] {\\n    margin: 0 auto;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7SUFDakIsYUFBYTtJQUNiLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxjQUFjO0FBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xyXG4gICAgbWF4LXdpZHRoOiAxMjgwcHg7XHJcbiAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG50cjpudGgtY2hpbGQoZXZlbikge1xyXG4gICAgYmFja2dyb3VuZDogI0YyRjJGMjtcclxufVxyXG5cclxudHI6bnRoLWNoaWxkKG9kZCkge1xyXG4gICAgYmFja2dyb3VuZDogI0ZGRjtcclxufVxyXG5cclxudGgsIHRkIHtcclxuICAgIHBhZGRpbmctbGVmdDogMXJlbTtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW07XHJcbn1cclxuXHJcbnRhYmxlIHtcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"names":["AppComponent","constructor","http","forecasts","title","ngOnInit","getForecasts","get","subscribe","result","error","console","i0","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\source\\github\\he-pipeline-assessment\\src\\Elsa.Dashboard.Angular\\src\\app\\app.component.ts","C:\\source\\github\\he-pipeline-assessment\\src\\Elsa.Dashboard.Angular\\src\\app\\app.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\ninterface WeatherForecast {\r\n  date: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  public forecasts: WeatherForecast[] = [];\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  ngOnInit() {\r\n    this.getForecasts();\r\n  }\r\n\r\n  getForecasts() {\r\n    this.http.get<WeatherForecast[]>('/weatherforecast').subscribe(\r\n      (result) => {\r\n        this.forecasts = result;\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  title = 'angularapp1.client';\r\n}\r\n","<h1 id=\"tableLabel\">Weather forecast</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<!-- <p *ngIf=\"!forecasts\"><em>Loading... Please refresh once the ASP.NET backend has started. See <a href=\"https://aka.ms/jspsintegrationangular\">https://aka.ms/jspsintegrationangular</a> for more details.</em></p>\r\n\r\n<table *ngIf=\"forecasts\">\r\n    <thead>\r\n        <tr>\r\n            <th>Date</th>\r\n            <th>Temp. (C)</th>\r\n            <th>Temp. (F)</th>\r\n            <th>Summary</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let forecast of forecasts\">\r\n            <td>{{ forecast.date }}</td>\r\n            <td>{{ forecast.temperatureC }}</td>\r\n            <td>{{ forecast.temperatureF }}</td>\r\n            <td>{{ forecast.summary }}</td>\r\n        </tr>\r\n    </tbody>\r\n</table> -->\r\n"],"mappings":";;AAeA,OAAM,MAAOA,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFjB,KAAAC,SAAS,GAAsB,EAAE;IAmBxC,KAAAC,KAAK,GAAG,oBAAoB;EAjBW;EAEvCC,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAYA,CAAA;IACV,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAoB,kBAAkB,CAAC,CAACC,SAAS,CAC3DC,MAAM,IAAI;MACT,IAAI,CAACN,SAAS,GAAGM,MAAM;IACzB,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACH;;;uCAlBWV,YAAY,EAAAY,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;YAAZf,YAAY;MAAAgB,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCfzBV,EAAA,CAAAY,cAAA,YAAoB;UAAAZ,EAAA,CAAAa,MAAA,uBAAgB;UAAAb,EAAA,CAAAc,YAAA,EAAK;UAEzCd,EAAA,CAAAY,cAAA,QAAG;UAAAZ,EAAA,CAAAa,MAAA,iEAA0D;UAAAb,EAAA,CAAAc,YAAA,EAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}