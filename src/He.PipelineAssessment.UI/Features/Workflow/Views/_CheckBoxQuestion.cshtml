@model He.PipelineAssessment.UI.Features.Workflow.SaveAndContinue.SaveAndContinueCommand
<div class="govuk-form-group">
    <fieldset class="govuk-fieldset" aria-describedby="waste-hint">
        <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
            <h1 class="govuk-heading-l">
                @Html.DisplayTextFor(m => m.Data.QuestionActivityData!.Title)
            </h1>
            
            <label class="govuk-label govuk-label--m">
                @Html.DisplayTextFor(m => m.Data.QuestionActivityData!.Question)
            </label>
            @if (!string.IsNullOrEmpty(Model.Data.QuestionActivityData!.QuestionHint))
            {
                <div id="event-name-hint" class="govuk-hint">
                    @Model.Data.QuestionActivityData.QuestionHint
                </div>
            }
        </legend>
        <div id="waste-hint" class="govuk-hint">
            Select all that apply
        </div>
        @if(Model.ValidationMessages.Any())
        {
            <p id="multiplechoice-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> 
                @foreach(var message in Model.ValidationMessages)
                {
                    @message
                    <br />
                }
            </p>
        }
        <div class="govuk-checkboxes" data-module="govuk-checkboxes">
            @{
                var exclusiveChoices = Model.Data.QuestionActivityData.MultipleChoice.Choices.Where(c => c.IsSingle).ToArray();
                var nonExclusiveChoices = Model.Data.QuestionActivityData.MultipleChoice.Choices.Where(c => !c.IsSingle).ToArray();
            }
            @for (int i = 0; i < Model.Data.QuestionActivityData.MultipleChoice.Choices.Count(); i++)
            {
                @Html.HiddenFor(m => Model.Data.QuestionActivityData.MultipleChoice.Choices[i].Answer)
                @Html.HiddenFor(m => Model.Data.QuestionActivityData.MultipleChoice.Choices[i].IsSingle)
            }
            @for (int i = 0; i < nonExclusiveChoices.Count(); i++)
            {
                string answerText = nonExclusiveChoices[i].Answer;
                List<string> selectedChoices = Model.Data.QuestionActivityData.MultipleChoice.SelectedChoices;
                bool isSelected = selectedChoices != null ? selectedChoices.Contains(answerText) : false;
                
                <div class="govuk-checkboxes__item">
                   @*Must use the input tag helper as opposed to htmlcheckbox, as all checkboxes need the same name property, which cannot be overridden easily in HtmlCheckboxFor*@
                    <input asp-for="@isSelected"
                       value="@nonExclusiveChoices[i].Answer"
                    name="Data.QuestionActivityData.MultipleChoice.SelectedChoices"
                    type="checkbox" class="govuk-checkboxes__input">
                    @Html.Label(nonExclusiveChoices[i].Answer, answerText, new {@class = "govuk-label govuk-checkboxes__label"})
                </div>
            }
            @for (int i = 0; i < exclusiveChoices.Count(); i++)
            {
                string answerText = exclusiveChoices[i].Answer;
                List<string> selectedChoices = Model.Data.QuestionActivityData.MultipleChoice.SelectedChoices;
                bool isSelected = selectedChoices != null ? selectedChoices.Contains(answerText) : false;

                <div class="govuk-checkboxes__divider">or</div>
                <div class="govuk-checkboxes__item">
                    @*Must use the input tag helper as opposed to htmlcheckbox, as all checkboxes need the same name property, which cannot be overridden easily in HtmlCheckboxFor*@
                    <input asp-for="@isSelected"
                       value="@exclusiveChoices[i].Answer"
                       name="Data.QuestionActivityData.MultipleChoice.SelectedChoices"
                     type="checkbox" class="govuk-checkboxes__input" data-behaviour="exclusive">
                   @Html.Label(exclusiveChoices[i].Answer, answerText, new {@class = "govuk-label govuk-checkboxes__label"})
                </div>
            }    
        </div>
    </fieldset>
    @if (!string.IsNullOrEmpty(Model.Data.QuestionActivityData.QuestionGuidance))
    {
        <br />
        <details class="govuk-details" data-module="govuk-details">
            <summary class="govuk-details__summary">
                <span class="govuk-details__summary-text">
                    Question guidance
                </span>
            </summary>
            <div class="govuk-details__text">
                @Model.Data.QuestionActivityData.QuestionGuidance
            </div>
        </details>
    }
    @if (Model.Data.QuestionActivityData.DisplayComments)
    {
        @await Html.PartialAsync("_Comments", Model.Data.QuestionActivityData.Comments)
    }
    <br/>

    <input id="Next" type="submit" value="Save and continue" name="Next" class="govuk-button"/>
</div>