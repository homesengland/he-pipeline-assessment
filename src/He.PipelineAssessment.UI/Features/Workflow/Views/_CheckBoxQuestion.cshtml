@model He.PipelineAssessment.UI.Features.Workflow.SaveAndContinue.SaveAndContinueCommand

<div class="govuk-form-group">
    <fieldset class="govuk-fieldset" aria-describedby="waste-hint">
        <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
            <h1 class="govuk-heading-l">
                @Html.DisplayTextFor(m => m.Data.QuestionActivityData!.Title)
            </h1>
            
            <label class="govuk-label govuk-label--m">
                @Html.DisplayTextFor(m => m.Data.QuestionActivityData!.Question)
            </label>
            @if (!string.IsNullOrEmpty(Model.Data.QuestionActivityData!.QuestionHint))
            {
                <div id="event-name-hint" class="govuk-hint">
                    @Model.Data.QuestionActivityData.QuestionHint
                </div>
            }
        </legend>
        <div id="waste-hint" class="govuk-hint">
            Select all that apply
        </div>
        @if(Model.Data.QuestionActivityData.MultipleChoice.Choices.Any(c => c.IsSingle)){
            <p id="checkbox-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span>Items marked with a '*' are exclusive, and may not be combined with other answers.’
            </p>
        }
        <div class="govuk-checkboxes" data-module="govuk-checkboxes">
            @for (int i = 0; i < Model.Data.QuestionActivityData.MultipleChoice.Choices.Count(); i++)
            {
                bool isSingle = Model.Data.QuestionActivityData.MultipleChoice.Choices[i].IsSingle;
                string answerText = Model.Data.QuestionActivityData.MultipleChoice.Choices[i].Answer;
                string labelAnswer = isSingle ? answerText + " *" : answerText;
                string checkedBehaviour = isSingle ? "exclusive" : "";
                

                <div class="govuk-checkboxes__item">
                    @Html.HiddenFor(m => m.Data.QuestionActivityData!.MultipleChoice!.Choices[i].Answer)
                    @*Must use the input tag helper as opposed to htmlcheckbox, as all checkboxes need the same name property, which cannot be overridden easily in HtmlCheckboxFor*@
                    <input asp-for="@Model.Data.QuestionActivityData!.MultipleChoice.Choices[i].IsSelected"
                    value="@Model.Data.QuestionActivityData!.MultipleChoice.Choices[i].Answer"
                    name="Data.QuestionActivityData.MultipleChoice.SelectedChoices" 
                    type="checkbox" class="govuk-checkboxes__input" data-behaviour="@checkedBehaviour">
                    @Html.Label(Model.Data.QuestionActivityData!.MultipleChoice.Choices[i].Answer, labelAnswer, new {@class = "govuk-label govuk-checkboxes__label"})
                </div>
            }
        </div>
    </fieldset>
    @if (!string.IsNullOrEmpty(Model.Data.QuestionActivityData.QuestionGuidance))
    {
        <br />
        <details class="govuk-details" data-module="govuk-details">
            <summary class="govuk-details__summary">
                <span class="govuk-details__summary-text">
                    Question guidance
                </span>
            </summary>
            <div class="govuk-details__text">
                @Model.Data.QuestionActivityData.QuestionGuidance
            </div>
        </details>
    }
    <br/>

    <input id="Next" type="submit" value="Save and continue" name="Next" class="govuk-button"/>
</div>