@using Elsa.CustomWorkflow.Sdk.Providers;
@using He.PipelineAssessment.UI.Features.Workflow.ViewModels
@model He.PipelineAssessment.UI.Features.Workflow.ViewModels.Question

@functions {
    private bool IsInGroup(List<Choice> groupCheckboxChoices, Choice checkboxChoice)
    {
        return groupCheckboxChoices.Any(x => x.QuestionChoiceGroup?.GroupIdentifier == checkboxChoice.QuestionChoiceGroup?.GroupIdentifier);
    }
}
@{
    var itemName = ValidationPropertyNameProvider.GetPropertyName(Model.QuestionType, Model.Index) + ".SelectedChoices";
    var formItemName = ValidationPropertyNameProvider.GetPropertyName(Model.QuestionType, Model.Index);

    var errorFormClass = !Model.IsValid ? "govuk-form-group--error" : "";
    var isReadOnly = Model.IsReadOnly ? "disabled" : "";
    var label = "Label-" + Model.QuestionText.Replace(" ", "");
    var questionTextModel = new QuestionText() { Text = Model.QuestionText, ReevaluatePrepopulatedAnswers = Model.ReevaluatePrePopulatedAnswers, IsReadOnly = Model.IsReadOnly, Label = label};
}

<div class="govuk-form-group @errorFormClass" id="@formItemName">
    @await Html.PartialAsync("_QuestionText", questionTextModel)
    @await Html.PartialAsync("_QuestionHint", Model)

    @{
        var distinctGroups = Model.Checkbox.Choices.Select(x => x.QuestionChoiceGroup?.GroupIdentifier).Distinct().ToList();
    }
    @foreach (var group in distinctGroups)
    {
        var groupName = (group ?? "no-group") + Model.Index;
        var groupCheckboxChoices = Model.Checkbox.Choices.Where(x => x.QuestionChoiceGroup?.GroupIdentifier == group).ToList();
        <div class="govuk-checkboxes" data-module="govuk-checkboxes" id="@itemName">
            @{
                var exclusiveChoices = groupCheckboxChoices.Where(c => c.IsSingle).ToArray();
                var nonExclusiveChoices = groupCheckboxChoices.Where(c => !c.IsSingle).ToArray();
            }
            @for (int i = 0; i < Model.Checkbox.Choices.Count(); i++)
            {
                if (IsInGroup(groupCheckboxChoices, Model.Checkbox.Choices[i]))
                {
                    var hiddenItemId = "Data.Questions[" + Model.Index + "].Checkbox.Choices[" + i + "].Id";
                    var hiddenItemAnswer = "Data.Questions[" + Model.Index + "].Checkbox.Choices[" + i + "].Answer";
                    var hiddenItemIsSingle = "Data.Questions[" + Model.Index + "].Checkbox.Choices[" + i + "].IsSingle";
                    var hiddenItemIsExclusiveToQuestion = "Data.Questions[" + Model.Index + "].Checkbox.Choices[" + i + "].IsExclusiveToQuestion";
                    var hiddenItemGroup = "Data.Questions[" + Model.Index + "].Checkbox.Choices[" + i + "].QuestionChoiceGroup.GroupIdentifier";

                    <input type="hidden" name="@hiddenItemId" value="@Model.Checkbox.Choices[i].Id" />
                    <input type="hidden" name="@hiddenItemAnswer" value="@Model.Checkbox.Choices[i].Answer" />
                    <input type="hidden" name="@hiddenItemIsSingle" value="@Model.Checkbox.Choices[i].IsSingle.ToString()" />
                    <input type="hidden" name="@hiddenItemIsExclusiveToQuestion" value="@Model.Checkbox.Choices[i].IsExclusiveToQuestion.ToString()" />
                    <input type="hidden" name="@hiddenItemGroup" value="@Model.Checkbox.Choices[i].QuestionChoiceGroup?.GroupIdentifier" />
                }
            }
            @for (int i = 0; i < nonExclusiveChoices.Count(); i++)
            {
                if (IsInGroup(groupCheckboxChoices, nonExclusiveChoices[i]))
                {
                    int answerId = nonExclusiveChoices[i].Id;
                    List<int> selectedChoices = Model.Checkbox.SelectedChoices;
                    bool isSelected = selectedChoices.Contains(answerId);
                    string groupDataBehavior = nonExclusiveChoices[i].IsExclusiveToQuestion ? "exclusivetoquestion" : "";

                    <div class="govuk-checkboxes__item">
                        @*Must use the input tag helper as opposed to htmlcheckbox, as all checkboxes need the same name property, which cannot be overridden easily in HtmlCheckboxFor*@
                        @{
                            var choiceId = "choice" + nonExclusiveChoices[i].Id;
                            var labelId = "label" + nonExclusiveChoices[i].Id;
                        @if (String.IsNullOrEmpty(isReadOnly))
                        {
                            <input asp-for="@isSelected"
                   id=@choiceId
                                   aria-labelledby=@labelId
                                   value="@nonExclusiveChoices[i].Id"
                                   name="@itemName"
                                   group="@groupName"
                                   type="checkbox" class="govuk-checkboxes__input" group-data-behaviour=@groupDataBehavior>
                        }
                        else
                        {
                            <input asp-for="@isSelected"
                   id=@choiceId
                                   aria-labelledby=@labelId
                                   value="@nonExclusiveChoices[i].Id"
                                   name="@itemName"
                                   group="@groupName"
                                   type="checkbox" class="govuk-checkboxes__input" disabled="@isReadOnly">

                        }
                            @Html.Label(nonExclusiveChoices[i].Answer, nonExclusiveChoices[i].Answer, new {@class = "govuk-label govuk-checkboxes__label", @id =labelId } )
                        }
                    </div>
                    if (!String.IsNullOrEmpty(isReadOnly) && isSelected)
                    {
                        <input type="hidden" value="@nonExclusiveChoices[i].Id" name="@itemName">
                    }
                }
            }
            @for (int i = 0; i < exclusiveChoices.Count(); i++)
            {
                if (IsInGroup(groupCheckboxChoices, exclusiveChoices[i]))
                {
                    int answerId = exclusiveChoices[i].Id;
                    List<int> selectedChoices = Model.Checkbox.SelectedChoices;
                    bool isSelected = selectedChoices.Contains(answerId);
                    string groupDataBehavior = exclusiveChoices[i].IsExclusiveToQuestion ? "exclusivetoquestion" : "exclusivetogroup";
                    
                    @if (nonExclusiveChoices.Any() || i > 0)
                    {
                        <div class="govuk-checkboxes__divider">or</div>
                    }
                    <div class="govuk-checkboxes__item">
                        @{
                            var choiceId = "choice" + exclusiveChoices[i].Id;
                            var labelId = "labelId" + exclusiveChoices[i].Id;
                            @if (String.IsNullOrEmpty(isReadOnly))
                        {
                        @*Must use the input tag helper as opposed to htmlcheckbox, as all checkboxes need the same name property, which cannot be overridden easily in HtmlCheckboxFor*@
                            <input asp-for="@isSelected"
                                               id=@choiceId
                                   aria-labelledby=@labelId
                                   value="@exclusiveChoices[i].Id"
                                   name="@itemName"
                                   group="@groupName"
                                   type="checkbox" class="govuk-checkboxes__input" group-data-behaviour=@groupDataBehavior>
                        }
                        else
                        {
                            <input asp-for="@isSelected"
                   id=@choiceId
                                   aria-labelledby=@labelId
                                   value="@exclusiveChoices[i].Id"
                                   name="@itemName"
                                   group="@groupName"
                                   type="checkbox" class="govuk-checkboxes__input" disabled="@isReadOnly">

                        }
                            @Html.Label(exclusiveChoices[i].Answer, exclusiveChoices[i].Answer, new {@class = "govuk-label govuk-checkboxes__label", @id =labelId})
                            }
                    </div>
                    if (!String.IsNullOrEmpty(isReadOnly) && isSelected)
                    {
                        <input type="hidden" value="@exclusiveChoices[i].Id" name="@itemName">
                    }
                }
                
            }
        </div>
        @if (distinctGroups.IndexOf(group) != distinctGroups.Count - 1)
        {
            <hr />
        }
    }

    @if (Model.EnhancedGuidance != null && Model.EnhancedGuidance.Any())
    {
        @await Html.PartialAsync("_EnhancedGuidance", Model)
    }
    else
    {
        @await Html.PartialAsync("_QuestionGuidance", Model.QuestionGuidance)
    }
    @await Html.PartialAsync("_Comments", new Comment(){Index = Model.Index, CommentText = Model.Comments,DisplayComments = Model.DisplayComments})
    @await Html.PartialAsync("_Evidence", new Evidence(){Index = Model.Index, DocumentLink = Model.DocumentEvidenceLink ,DisplayEvidenceBox = Model.DisplayEvidenceBox})
</div>
