@using He.PipelineAssessment.UI.Features.Workflow.ViewModels
@model He.PipelineAssessment.UI.Features.Workflow.ViewModels.Question
@{
    var itemName = "Data.Questions[" + Model.Index + "].Radio.SelectedAnswer";
    var formItemName = "Data.Questions[" + Model.Index + "].Radio";

    var itemId = Model.Index + "radio_multi_select_";
    var errorFormClass = !Model.IsValid ? "govuk-form-group--error" : "";
    var isReadOnly = Model.IsReadOnly ? "disabled" : "";
    var label = "Label-" + Model.QuestionText.Replace(" ", "");
    var questionTextModel = new QuestionText() { Text = Model.QuestionText, ReevaluatePrepopulatedAnswers = Model.ReevaluatePrePopulatedAnswers, IsReadOnly = Model.IsReadOnly, Label=label };
}

<div class="govuk-form-group @errorFormClass" id="@formItemName">
    @await Html.PartialAsync("_QuestionText", questionTextModel)
    @await Html.PartialAsync("_QuestionHint", Model.QuestionHint)

    <div class="govuk-radios" data-module="govuk-radios" id="@itemName">
        @for (int i = 0; i < Model.Radio.Choices.Count(); i++)
        {
            var hiddenItemNameAnswer = "Data.Questions[" + Model.Index + "].Radio.Choices[" + i + "].Answer";
            var hiddenItemNameId = "Data.Questions[" + Model.Index + "].Radio.Choices[" + i + "].Id";
            <input type="hidden" name="@hiddenItemNameAnswer" value="@Model.Radio.Choices[i].Answer" />
            <input type="hidden" name="@hiddenItemNameId" value="@Model.Radio.Choices[i].Id" />
        }
        @{
            int iterrator = 1;
            @foreach (var choice in Model.Radio.Choices)
            {
                string isChecked = "";
                if (choice.Id == Model.Radio.SelectedAnswer)
                {
                    isChecked = "checked";
                }
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" name="@itemName" type="radio" value="@choice.Id" id="@itemId@iterrator" @isChecked @isReadOnly aria-labelledby="@choice.Answer.Replace(" ","")">
                    <label class="govuk-label govuk-radios__label" for="@choice.Answer" id="@choice.Answer.Replace(" ","")">@choice.Answer</label>
                </div>
                iterrator++;
            }
        }
    </div>


    @if (Model.EnhancedGuidance != null && Model.EnhancedGuidance.Any())
    {
        @await Html.PartialAsync("_EnhancedGuidance", Model)
    }
    else
    {
        @await Html.PartialAsync("_QuestionGuidance", Model.QuestionGuidance)
    }
    @await Html.PartialAsync("_Comments", new Comment(){Index = Model.Index, CommentText = Model.Comments,DisplayComments = Model.DisplayComments})
    @await Html.PartialAsync("_Evidence", new Evidence(){Index = Model.Index, DocumentLink = Model.DocumentEvidenceLink ,DisplayEvidenceBox = Model.DisplayEvidenceBox})
</div>