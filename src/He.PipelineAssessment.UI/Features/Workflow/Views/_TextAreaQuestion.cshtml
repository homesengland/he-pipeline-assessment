@using He.PipelineAssessment.UI.Features.Workflow.ViewModels
@model He.PipelineAssessment.UI.Features.Workflow.ViewModels.Question
@{
    var itemName = "Data.Questions[" + Model.Index + "].Text";
    var answerName = "Data.Questions[" + Model.Index + "].Answers[0]";
    var errorFormClass = !Model.IsValid ? "govuk-form-group--error" : "";
    var errorFieldClass = !Model.IsValid ? "govuk-input--error" : "";
    var isReadOnly = Model.IsReadOnly ? "disabled" : "";
    var questionTextModel = new QuestionText() { Text = Model.QuestionText, ReevaluatePrepopulatedAnswers = Model.ReevaluatePrePopulatedAnswers, IsReadOnly = Model.IsReadOnly};

}

<div class="govuk-form-group @errorFormClass">
    @await Html.PartialAsync("_QuestionText", questionTextModel)
    @await Html.PartialAsync("_QuestionHint", Model.QuestionHint)

    <div class="govuk-character-count" data-module="govuk-character-count" data-maxlength="@Model.CharacterLimit">
        <div class="govuk-form-group">
            <textarea class="govuk-textarea govuk-js-character-count" id="@answerName" @errorFieldClass @isReadOnly name="@itemName" rows="5">@Model.Text</textarea>
        </div>
        <div id="@answerName-info" class="govuk-hint govuk-character-count__message">
            You can enter up to @Model.CharacterLimit characters
        </div>
    </div>

    @if (Model.EnhancedGuidance.Count() > 0)
    {
        @await Html.PartialAsync("_EnhancedGuidance", Model)
    }
    else
    {
        @await Html.PartialAsync("_QuestionGuidance", Model.QuestionGuidance)
    }
    
    

    @await Html.PartialAsync("_Comments", new Comment(){Index = Model.Index, CommentText = Model.Comments,DisplayComments = Model.DisplayComments})
    @await Html.PartialAsync("_Evidence", new Evidence(){Index = Model.Index, DocumentLink = Model.DocumentEvidenceLink ,DisplayEvidenceBox = Model.DisplayEvidenceBox})
</div>