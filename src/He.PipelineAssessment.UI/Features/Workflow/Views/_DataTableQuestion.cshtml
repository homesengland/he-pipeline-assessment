@using He.PipelineAssessment.UI.Features.Workflow.ViewModels
@model He.PipelineAssessment.UI.Features.Workflow.ViewModels.Question

@functions {
    private bool IsInGroup(List<Choice> groupCheckboxChoices, Choice checkboxChoice)
    {
        return groupCheckboxChoices.Any(x => x.QuestionChoiceGroup?.GroupIdentifier == checkboxChoice.QuestionChoiceGroup?.GroupIdentifier);
    }
}
@{
    var itemName = "Data.Questions[" + Model.Index + "].Checkbox.SelectedChoices";
    var formItemName = "Data.Questions[" + Model.Index + "].Checkbox";

    var errorFormClass = !Model.IsValid ? "govuk-form-group--error" : "";
    var isReadOnly = Model.IsReadOnly ? "disabled" : "";
}

<div class="govuk-form-group @errorFormClass" id="@formItemName">
    @await Html.PartialAsync("_QuestionTitle", Model.Title)

    @await Html.PartialAsync("_QuestionHint", Model.QuestionHint)


    @{
        var dataTable = Model.DataTable;
    }
    <div class="scroll-table">
        <h2 class="govuk-heading-m">@Model.QuestionText</h2>
        <table class="govuk-table">
            <thead class="govuk-table__head">
                <tr class="govuk-table__row">
                    @foreach (var input in dataTable.Inputs)
                    {
                        <th scope="col" class="govuk-table__header">@input.InputHeading</th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    @foreach (var input in dataTable.Inputs)
                    {
                        <td class="govuk-table__cell">
                            <input type="text" class="govuk-input govuk-input--width-scroll-table" value="@input.Input" />
                        </td>
                    }
                </tr>
            </tbody>
            </table>

        </div>

        <br />

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds-from-desktop">
            <dl class="govuk-summary-list govuk-!-margin-bottom-9">
                @foreach (var dataInput in dataTable.Inputs)
                {
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key">
                            @dataInput.InputHeading
  
                        </dt>
                        <dd class="govuk-summary-list__value">
                            <div class="govuk-input__wrapper">

                                <div class="govuk-input__prefix" aria-hidden="true">£</div>
                                <input type="text" class="govuk-input govuk-input--width-5" value="@dataInput.Input"/>

                            </div>
                        </dd>
                    </div>
                }
            </dl>
        </div>
    </div>
        

    @await Html.PartialAsync("_Comments", new Comment(){Index = Model.Index, CommentText = Model.Comments,DisplayComments = Model.DisplayComments})
</div>