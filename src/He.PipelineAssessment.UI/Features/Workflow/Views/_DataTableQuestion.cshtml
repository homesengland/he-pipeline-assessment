@using He.PipelineAssessment.UI.Features.Workflow.ViewModels
@model He.PipelineAssessment.UI.Features.Workflow.ViewModels.Question

@{
    var itemName = "Data.Questions[" + Model.Index + "].DataTable.Inputs";
    var formItemName = "Data.Questions[" + Model.Index + "].DataTable";

    var errorFormClass = !Model.IsValid ? "govuk-form-group--error" : "";
    var isReadOnly = Model.IsReadOnly ? "disabled" : "";
    }


<div class="govuk-form-group @errorFormClass" id="@formItemName">
    @await Html.PartialAsync("_QuestionTitle", Model.Title)

    @{
        var dataTable = Model.DataTable;
        var hiddenInputType = "Data.Questions[" + Model.Index + "].DataTable.InputType";
    }

    <input type="hidden" name="@hiddenInputType" value="@Model.DataTable.InputType" />

    @for (int i = 0; i < Model.DataTable.Inputs.Count(); i++)
    {
        var hiddenItemNameAnswer = "Data.Questions[" + Model.Index + "].DataTable.Inputs[" + i + "].Input";
        var hiddenItemNameId = "Data.Questions[" + Model.Index + "].DataTable.Inputs[" + i + "].Title";
@*        <input type="hidden" name="@hiddenItemNameAnswer" value="@Model.DataTable.Inputs[i].Input" />*@
        <input type="hidden" name="@hiddenItemNameId" value="@Model.DataTable.Inputs[i].InputHeading" />
    }
@*
    <div class="scroll-table">
        <h2 class="govuk-heading-m">@Model.QuestionText</h2>
        <table class="govuk-table">
            <thead class="govuk-table__head">
                <tr class="govuk-table__row">
                    @foreach (var input in dataTable.Inputs)
                    {
                        <th scope="col" class="govuk-table__header">@input.InputHeading</th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    @for(int i = 0; i < Model.DataTable.Inputs.Count(); i++)
                    {
                        var specificItemName = itemName + "[" + i + "].Input";
                        <td class="govuk-table__cell">

                            <input id="@specificItemName"
                               type="text"
                               name="@specificItemName"
                               class="govuk-input govuk-input--width-scroll-table"
                               @errorFormClass
                               @isReadOnly
                               value="@Model.DataTable.Inputs[i].Input" />
                        </td>
                    }
                </tr>
            </tbody>
            </table>
        @await Html.PartialAsync("_QuestionHint", Model.QuestionHint)
        </div>


        <br />*@

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds-from-desktop">
            <dl class="govuk-summary-list govuk-!-margin-bottom-9">
                @for (int i = 0; i < Model.DataTable.Inputs.Count(); i++)
                {
                    var specificItemName = itemName + "[" + i + "].Input";
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key">
                            @Model.DataTable.Inputs[i].InputHeading
  
                        </dt>
                        <dd class="govuk-summary-list__value">
                            <div class="govuk-input__wrapper">

                                <div class="govuk-input__prefix" aria-hidden="true">£</div>
                                <input id="@specificItemName"
                                   type="text"
                                   name="@specificItemName"
                                   class="govuk-input govuk-input--width-5"
                                   @errorFormClass
                                   @isReadOnly
                                   value="@Model.DataTable.Inputs[i].Input" />

                            </div>
                        </dd>
                    </div>
                }
            </dl>
        </div>
    </div>
    @await Html.PartialAsync("_QuestionHint", Model.QuestionHint)
        

    @await Html.PartialAsync("_Comments", new Comment(){Index = Model.Index, CommentText = Model.Comments,DisplayComments = Model.DisplayComments})
</div>