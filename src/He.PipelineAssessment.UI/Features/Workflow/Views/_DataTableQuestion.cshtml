@using He.PipelineAssessment.UI.Features.Workflow.ViewModels
@using He.PipelineAssessment.UI.Helper
@using Elsa.CustomWorkflow.Sdk
@model He.PipelineAssessment.UI.Features.Workflow.ViewModels.Question


@{
    var formItemName = "Data.Questions[" + Model.Index + "].DataTable";
    var errorFormClass = !Model.IsValid ? "govuk-form-group--error" : "";
    var isReadOnly = Model.IsReadOnly ? "disabled" : "";
}


<div class="govuk-form-group @errorFormClass" id="@formItemName">
    @await Html.PartialAsync("_QuestionTitle", Model.Title)

    @{
        var dataTable = Model.DataTable;

    }

    @for (int i = 0; i < Model.DataTable.Count(); i++)
    {
        var hiddenInputType = "Data.Questions[" + Model.DataTable[i].QuestionIndex + "].DataTable.InputType";
        var hiddenGroupingId = "Data.Questions[" + Model.DataTable[i].QuestionIndex + "].DataTable.DisplayGroupId";

        <input type="hidden" name="@hiddenInputType" value="@Model.DataTable[i].InputType" />
        <input type="hidden" name="@hiddenGroupingId" value="@Model.DataTable[i].DisplayGroupId" />
    }

    @{
        DataTable largestDataTable = Model.DataTable.OrderByDescending(x => x.Inputs.Count()).FirstOrDefault()!;
    }

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds-from-desktop">
            <dl class="govuk-summary-list govuk-!-margin-bottom-9">
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key">

                    </dt>
                    @foreach (var question in Model.DataTable)
                    {
                        <dt class="govuk-summary-list__key">
                            @question.QuestionText
                        </dt>
                    }
                </div>

                @for (int i = 0; i < largestDataTable.Inputs.Count(); i++)
                {
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key">
                            @largestDataTable.Inputs[i].InputHeading
                        </dt>
                        @for (int q = 0; q < Model.DataTable.Count(); q++)
                        
                        {
                            int countOfColumnIndex = Model.DataTable[q].Inputs.Count();
                            if (i < countOfColumnIndex)
                            {
                                var itemName = "Data.Questions[" + Model.DataTable[q].QuestionIndex + "].DataTable.Inputs[" + i + "].Input";
                                var hiddenTitleName = "Data.Questions[" + Model.DataTable[q].QuestionIndex + "].DataTable.Inputs[" + i + "].Title";
                                var hiddenIdentifierName = "Data.Questions[" + Model.DataTable[q].QuestionIndex + "].DataTable.Inputs[" + i + "].Identifier";

                                <input type="hidden" name="@hiddenTitleName" value="@Model.DataTable[q].Inputs[i].InputHeading" />
                                <input type="hidden" name="@hiddenIdentifierName" value="@Model.DataTable[q].Inputs[i].Identifier" />

                                var input = Model.DataTable[q].Inputs.ElementAtOrDefault(i);
                                bool hasNullInput = input == null;
                                var inputValue = hasNullInput ? "" : Model.DataTable[q].Inputs[i].Input;
                                var disableInput = Model.DataTable[q].Inputs[i].IsReadOnly? "disabled":"";
                                string dataFlagIsSummary = Model.DataTable[q].Inputs[i].IsSummaryTotal ? "true" : "false";
                                string dataColumn =  q.ToString() ;
                                <dd class="govuk-summary-list__value">
                                    <div class="govuk-input__wrapper">
                                        @if (Model.DataTable[q].InputType == DataTableInputTypeConstants.CurrencyDataTableInput)
                                        {
                                            var succes = Decimal.TryParse(inputValue, out decimal tempCurrencyInputDecimal);
                                            decimal? currencyInputDecimal = succes ? tempCurrencyInputDecimal: null;
                                            <div class="govuk-input__prefix" aria-hidden="true">£</div>
                                            <input id="@itemName"
                                            type="number"
                                            name="@itemName"
                                            class="govuk-input govuk-input--width-5"
                                            @errorFormClass
                                            @disableInput
                                            data-summary=@dataFlagIsSummary
                                            data-column=@dataColumn
                                            value="@currencyInputDecimal.ToCommaSeparatedNumber()" 
                                            currency-formatter="true" />
                                        }
                                        @if (Model.DataTable[q].InputType == DataTableInputTypeConstants.DecimalDataTableInput
                                            || Model.DataTable[q].InputType == DataTableInputTypeConstants.IntegerDataTableInput)
                                        {
                                            <input id="@itemName"
                                            type="number"
                                            name="@itemName"
                                            class="govuk-input govuk-input--width-5"
                                            @errorFormClass
                                            @disableInput
                                            data-summary=@dataFlagIsSummary
                                            data-column=@dataColumn
                                            value="@inputValue" />
                                        }         
                                        @if (Model.DataTable[q].InputType == DataTableInputTypeConstants.TextDataTableInput)
                                        {
                                            <input id="@itemName"
                                                   type="text"
                                                   name="@itemName"
                                                   class="govuk-input govuk-input--width-5"
                                                   @errorFormClass
                                                   @disableInput
                                                   value="@inputValue" />
                                        }       
                                    </div>
                                </dd>
                            }
                            else
                            {
                                <dd class="govuk-summary-list__value">
                                    <div class="govuk-input__wrapper">
                                    </div>
                                </dd>
                            }


                        }
                    </div>
                }
            </dl>
        </div>
    </div>
    @await Html.PartialAsync("_QuestionHint", Model.QuestionHint)


    @await Html.PartialAsync("_Comments", new Comment(){Index = Model.Index, CommentText = Model.Comments,DisplayComments = Model.DisplayComments})
</div>