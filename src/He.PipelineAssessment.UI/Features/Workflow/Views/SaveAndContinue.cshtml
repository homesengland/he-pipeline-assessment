@using He.PipelineAssessment.UI
@using Elsa.CustomWorkflow.Sdk
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Elsa.CustomWorkflow.Sdk.Models.Workflow
@model He.PipelineAssessment.UI.Features.Workflow.QuestionScreenSaveAndContinue.QuestionScreenSaveAndContinueCommand

@{
    ViewData["Title"] = "Pipeline Assessment";
    Layout = "_Layout";

    var tableList = new List<List<QuestionActivityData>>();
    int currentIndex = 0;
    foreach (var question in Model.Data.Questions)
    {
        if (question.QuestionType==QuestionTypeConstants.Information)
        {
            var questionList = new List<QuestionActivityData>();
            questionList.Add(question);
            tableList.Add(questionList);
            currentIndex++;
        }
        else
        {
            tableList[currentIndex-1].Add(question);
        }
    }
}
<div class="text-center">
    @if (Model.Data.ActivityId != Model.Data.PreviousActivityId)
    {
        @Html.ActionLink("Back","LoadWorkflowActivity","Workflow", new {WorkflowInstanceId = Model.Data.WorkflowInstanceId, ActivityId = Model.Data.PreviousActivityId, ActivityType = Model.Data.PreviousActivityType},new{ @class="govuk-back-link"})
    }

    @using (Html.BeginForm("QuestionScreenSaveAndContinue", "Workflow", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => Model.Data.WorkflowInstanceId)
        @Html.HiddenFor(m => Model.Data.ActivityId)
        @Html.HiddenFor(m => Model.Data.PreviousActivityId)
        @Html.HiddenFor(m => Model.Data.PreviousActivityType)
        @Html.HiddenFor(m => Model.AssessmentId)
        @Html.HiddenFor(m=> Model.WorkflowDefinitionId)
        @Html.HiddenFor(m => Model.Data.ActivityType)
        <br />
@*          if (Model.Data.ActivityType == ActivityTypeConstants.QuestionScreen)
    {
    @await Html.PartialAsync("_QuestionScreen",Model)
    }*@

@*        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds-from-desktop">
                <dl class="govuk-summary-list govuk-!-margin-bottom-9">
                    @foreach (var question in Model.Data.Questions!)
                    {
                        <div class="govuk-summary-list__row">
                            <dt class="govuk-summary-list__key">
                                @if (question.QuestionType != QuestionTypeConstants.Information)
                                {
                                    @question.Question
                                }
                                else
                                {
                                    @string.Join(System.Environment.NewLine, question.Information.InformationTextList
                                        .Where(x=>x.IsGuidance==false && x.IsHyperlink ==false && x.Text!=null)
                                        .Select(x=>x.Text)
                                        .ToList());
                                    
                                }

                            </dt>
                            <dd class="govuk-summary-list__value">
                                <div class="govuk-input__wrapper">

                                    @if (question.QuestionType != QuestionTypeConstants.Information)
                                    {
                                        <div class="govuk-input__prefix" aria-hidden="true">£</div>
                                        <input type="text" class="govuk-input govuk-input--width-5" />
                                    }

                                </div>
                            </dd>

                        </div>

                    }
                </dl>
            </div>
        </div>
        <input id="Next" type="submit" value="Save and continue" name="Next" class="govuk-button" />*@

  @*      <table class="govuk-table">
            <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                @foreach (var question in Model.Data.Questions)
                {
                    @if (question.QuestionType != QuestionTypeConstants.Information)
                    {
                        <th scope="col" class="govuk-table__header">@question.Question</th>
                    }
                }
            </tr>
            </thead>
            <tbody class="govuk-table__body">
            @foreach (var question in Model.Data.Questions)
            {
                @if (question.QuestionType != QuestionTypeConstants.Information)
                {
                    <td class="govuk-table__cell">
                        <input type="text" class="govuk-input govuk-input--width-5" />
                    </td>
                }
            }
            </tbody>
        </table>*@
        
        @foreach (var item in tableList)
        {
            <div class="scroll-table">
            <h2 class="govuk-heading-m">@item[0].Information.InformationTextList[0].Text</h2>
            <table class="govuk-table">
                <thead class="govuk-table__head">
                <tr class="govuk-table__row">
                    @foreach (var question in item)
                    {
                        @if (question.QuestionType != QuestionTypeConstants.Information)
                        {
                            <th scope="col" class="govuk-table__header">@question.Question</th>
                        }
                    }
                </tr>
                </thead>
                <tbody class="govuk-table__body">
                @foreach (var question in item)
                {
                    @if (question.QuestionType != QuestionTypeConstants.Information)
                    {
                        <td class="govuk-table__cell">
                                <input type="text" class="govuk-input govuk-input--width-scroll-table" />
                        </td>
                    }
                }
                </tbody>
            </table>
        </div>


        }
        <input id="Next" type="submit" value="Save and continue" name="Next" class="govuk-button" />
    }
</div>


