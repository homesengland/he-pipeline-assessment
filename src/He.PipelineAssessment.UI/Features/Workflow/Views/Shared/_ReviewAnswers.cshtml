@using Elsa.CustomWorkflow.Sdk
@using He.PipelineAssessment.UI.Helper;
@model He.PipelineAssessment.UI.Features.Workflow.ViewModels.ReviewAnswers;
@{
}
<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        <dl class="govuk-summary-list govuk-!-margin-bottom-9">
            @foreach (var question in Model.Questions!.Where(x => x.QuestionType != QuestionTypeConstants.Information))
            {
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key">
                        @question.QuestionText
                    </dt>
                    <dd class="govuk-summary-list__value govuk-!-width-full">
                        @if (question.Answers != null)
                        {
                            @foreach (var answer in question.Answers)
                            {
                                if (question.QuestionType == QuestionTypeConstants.PercentageQuestion)
                                {
                                    <p>@answer.AnswerText.ToCommaSeparatedNumber() %</p>
                                }
                                else if (question.QuestionType == QuestionTypeConstants.IntegerQuestion)
                                {
                                    <p>@answer.AnswerText.ToCommaSeparatedNumber() </p>
                                }
                                else if (question.QuestionType == QuestionTypeConstants.DecimalQuestion)
                                {
                                    <p>@answer.AnswerText.ToCommaSeparatedNumber() </p>
                                }
                                else if (question.QuestionType == QuestionTypeConstants.CurrencyQuestion)
                                {

                                    <p>£ @answer.AnswerText.ToCommaSeparatedNumber()</p>
                                }
                                else if (question.QuestionType == QuestionTypeConstants.DataTable)
                                {

                                }
                                else
                                {
                                    <p>@answer.AnswerText</p>

                                }
                                if (!string.IsNullOrEmpty(question.Comments))
                                {
                                    <details class="govuk-details" data-module="govuk-details">
                                        <summary class="govuk-details__summary">
                                            <span class="govuk-details__summary-text">
                                                Display supporting comments
                                            </span>
                                        </summary>
                                        <div class="govuk-details__text">
                                            @question.Comments
                                        </div>
                                    </details>
                                }
                            }
                        }
                    </dd>
                    @if (Model.RenderChangeLinks && Model.WorkflowInstanceId != null && (!question.IsReadOnly.HasValue || !question.IsReadOnly.Value))
                    {
                        <dd class="govuk-summary-list__actions">
                            @Html.ActionLink("Change", "LoadWorkflowActivity", "Workflow", new { WorkflowInstanceId = Model.WorkflowInstanceId, ActivityId = @question.ActivityId, ActivityType = ActivityTypeConstants.QuestionScreen }, new { @class = "govuk-link" })
                        </dd>
                    }
                </div>
                if (question.QuestionType == QuestionTypeConstants.DataTable)
                {
                    @if (question.Answers != null)
                    {
                        @foreach (var answer in question.Answers)
                        {
                            var tableModel = answer.AnswerText.ToTableModel();
                            if (tableModel.Inputs.Any())
                            {
                                @await Html.PartialAsync("_TableModelReviewAnswer", tableModel);
                            }
                        }
                    }
                }
            }
        </dl>
    </div>
</div>

