@using Elsa.CustomWorkflow.Sdk
@using He.PipelineAssessment.UI.Features.Workflow.ViewModels
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model He.PipelineAssessment.UI.Features.Workflow.SaveAndContinue.SaveAndContinueCommand
<div class="govuk-form-group">
    <fieldset class="govuk-fieldset" aria-describedby="waste-hint">
        <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
            <h1 class="govuk-heading-l">
                @Html.DisplayTextFor(m => m.Data.PageTitle)
            </h1>
        </legend>
        
        @if (!Model.IsValid && Model.ValidationMessages !=null)
        {
            @await Html.PartialAsync("_ValidationSummary",Model.ValidationMessages)
        }

        @if (Model.Data.MultiQuestionActivityData != null)
        {
            @for (int i = 0; i < Model.Data.MultiQuestionActivityData.Count; i++)
            {
                @Html.HiddenFor(m => m.Data.MultiQuestionActivityData![i].QuestionId)
                @Html.HiddenFor(m => m.Data.MultiQuestionActivityData![i].QuestionType)
                @Html.HiddenFor(m => m.Data.MultiQuestionActivityData![i].QuestionGuidance)
                @Html.HiddenFor(m => m.Data.MultiQuestionActivityData![i].ActivityType)
                @Html.HiddenFor(m => m.Data.MultiQuestionActivityData![i].Title)
                @Html.HiddenFor(m => m.Data.MultiQuestionActivityData![i].Question)
                @Html.HiddenFor(m => m.Data.MultiQuestionActivityData![i].QuestionHint)
                @Html.HiddenFor(m => m.Data.MultiQuestionActivityData![i].DisplayComments)

                bool isValidItem = true;
                if (!Model.IsValid && Model.ValidationMessages != null && Model.ValidationMessages.Errors != null)
                {
                    if (Model.ValidationMessages.Errors.Any(x => x.PropertyName.Contains("Data.MultiQuestionActivityData[" + i + "]")))
                    {
                        isValidItem = false;
                    }
                }

                @if (Model.Data.MultiQuestionActivityData![i].QuestionType == QuestionTypeConstants.TextQuestion)
                {
                    @await Html.PartialAsync("_MultiTextQuestion",new MultiQuestion()
                    {
                        Index = i,
                        IsValid = isValidItem,
                        ActivityType = Model.Data.MultiQuestionActivityData[i].ActivityType,
                        Answer = Model.Data.MultiQuestionActivityData[i].Answer,
                        Comments = Model.Data.MultiQuestionActivityData[i].Comments,
                        DisplayComments = Model.Data.MultiQuestionActivityData[i].DisplayComments,
                        Question = Model.Data.MultiQuestionActivityData[i].Question,
                        QuestionGuidance = Model.Data.MultiQuestionActivityData[i].QuestionGuidance,
                        QuestionHint = Model.Data.MultiQuestionActivityData[i].QuestionHint,
                        QuestionId = Model.Data.MultiQuestionActivityData[i].QuestionId,
                        QuestionType = Model.Data.MultiQuestionActivityData[i].QuestionType,
                        Title = Model.Data.MultiQuestionActivityData[i].Title
                    })
                }
                @if (Model.Data.MultiQuestionActivityData![i].QuestionType == QuestionTypeConstants.DateQuestion)
                {
                    var dateModel = new Date();
                    dateModel.Day = Model.Data.MultiQuestionActivityData[i].Date.Day;
                    dateModel.Month = Model.Data.MultiQuestionActivityData[i].Date.Month;
                    dateModel.Year = Model.Data.MultiQuestionActivityData[i].Date.Year;
                    @await Html.PartialAsync("_MultiDateQuestion",new MultiQuestion()
                    {
                        Index = i,
                        IsValid = isValidItem,
                        ActivityType = Model.Data.MultiQuestionActivityData[i].ActivityType,
                        Answer = Model.Data.MultiQuestionActivityData[i].Answer,
                        Comments = Model.Data.MultiQuestionActivityData[i].Comments,
                        DisplayComments = Model.Data.MultiQuestionActivityData[i].DisplayComments,
                        Question = Model.Data.MultiQuestionActivityData[i].Question,
                        QuestionGuidance = Model.Data.MultiQuestionActivityData[i].QuestionGuidance,
                        QuestionHint = Model.Data.MultiQuestionActivityData[i].QuestionHint,
                        QuestionId = Model.Data.MultiQuestionActivityData[i].QuestionId,
                        QuestionType = Model.Data.MultiQuestionActivityData[i].QuestionType,
                        Title = Model.Data.MultiQuestionActivityData[i].Title, 
                        Date = dateModel
                    })
                }
                @if (Model.Data.MultiQuestionActivityData![i].QuestionType == QuestionTypeConstants.CurrencyQuestion)
                {
                    @await Html.PartialAsync("_MultiCurrencyQuestion",new MultiQuestion()
                    {
                        Index = i,
                        IsValid = isValidItem,
                        ActivityType = Model.Data.MultiQuestionActivityData[i].ActivityType,
                        Answer = Model.Data.MultiQuestionActivityData[i].Answer,
                        Comments = Model.Data.MultiQuestionActivityData[i].Comments,
                        DisplayComments = Model.Data.MultiQuestionActivityData[i].DisplayComments,
                        Question = Model.Data.MultiQuestionActivityData[i].Question,
                        QuestionGuidance = Model.Data.MultiQuestionActivityData[i].QuestionGuidance,
                        QuestionHint = Model.Data.MultiQuestionActivityData[i].QuestionHint,
                        QuestionId = Model.Data.MultiQuestionActivityData[i].QuestionId,
                        QuestionType = Model.Data.MultiQuestionActivityData[i].QuestionType,
                        Title = Model.Data.MultiQuestionActivityData[i].Title,
                        Decimal = Model.Data.MultiQuestionActivityData[i].Decimal
                    })
                }
                @if (Model.Data.MultiQuestionActivityData![i].QuestionType == QuestionTypeConstants.MultipleChoiceQuestion)
                {

                    @await Html.PartialAsync("_MultiCheckboxQuestion",new MultiQuestion()
                    {
                        Index = i,
                        IsValid = isValidItem,
                        ActivityType = Model.Data.MultiQuestionActivityData[i].ActivityType,
                        Answer = Model.Data.MultiQuestionActivityData[i].Answer,
                        Comments = Model.Data.MultiQuestionActivityData[i].Comments,
                        DisplayComments = Model.Data.MultiQuestionActivityData[i].DisplayComments,
                        Question = Model.Data.MultiQuestionActivityData[i].Question,
                        QuestionGuidance = Model.Data.MultiQuestionActivityData[i].QuestionGuidance,
                        QuestionHint = Model.Data.MultiQuestionActivityData[i].QuestionHint,
                        QuestionId = Model.Data.MultiQuestionActivityData[i].QuestionId,
                        QuestionType = Model.Data.MultiQuestionActivityData[i].QuestionType,
                        Title = Model.Data.MultiQuestionActivityData[i].Title,
                        MultipleChoice = new MultipleChoiceModel()
                        {
                            SelectedChoices = Model.Data.MultiQuestionActivityData[i].MultipleChoice.SelectedChoices,
                            Choices = Model.Data.MultiQuestionActivityData[i].MultipleChoice.Choices.Select(x=> new He.PipelineAssessment.UI.Features.Workflow.ViewModels.Choice(){Answer = x.Answer,IsSingle = x.IsSingle}).ToList()
                        }
                        })
                    }
                @if (Model.Data.MultiQuestionActivityData![i].QuestionType == QuestionTypeConstants.SingleChoiceQuestion)
                {

                    @await Html.PartialAsync("_MultiRadioButtonQuestion",new MultiQuestion()
                    {
                        Index = i,
                        IsValid = isValidItem,
                        ActivityType = Model.Data.MultiQuestionActivityData[i].ActivityType,
                        Answer = Model.Data.MultiQuestionActivityData[i].Answer,
                        Comments = Model.Data.MultiQuestionActivityData[i].Comments,
                        DisplayComments = Model.Data.MultiQuestionActivityData[i].DisplayComments,
                        Question = Model.Data.MultiQuestionActivityData[i].Question,
                        QuestionGuidance = Model.Data.MultiQuestionActivityData[i].QuestionGuidance,
                        QuestionHint = Model.Data.MultiQuestionActivityData[i].QuestionHint,
                        QuestionId = Model.Data.MultiQuestionActivityData[i].QuestionId,
                        QuestionType = Model.Data.MultiQuestionActivityData[i].QuestionType,
                        Title = Model.Data.MultiQuestionActivityData[i].Title,
                        SingleChoice = new SingleChoiceModel()
                        {
                            SelectedAnswer = Model.Data.MultiQuestionActivityData[i].SingleChoice.SelectedAnswer,
                            Choices = Model.Data.MultiQuestionActivityData[i].SingleChoice.Choices.Select(x=> new He.PipelineAssessment.UI.Features.Workflow.ViewModels.Choice(){Answer = x.Answer,IsSingle = x.IsSingle}).ToList()
                        }
                    })
                }
            }
        }
    </fieldset>

    <input id="Next" type="submit" value="Save and continue" name="Next" class="govuk-button" />
</div>