@using Elsa.CustomWorkflow.Sdk
@using He.PipelineAssessment.UI.Features.Workflow.QuestionScreenSaveAndContinue
@using He.PipelineAssessment.UI.Features.Workflow.ViewModels
@using He.PipelineAssessment.UI.Extensions;
@model QuestionScreenSaveAndContinueCommand
@inject NonceConfig nonceConfig

@{
    List<string?> usedDisplayGroupIds = new List<string?>();
    var questionsWithReevaluatedPrePopulatedAnswers = Model.Data.Questions!.Any(question => {
        if (question.QuestionType == QuestionTypeConstants.DataTable)
        {
            return question.ReevaluatePrePopulatedAnswers && !question.DataTable.Inputs.All(x=> x.IsReadOnly);
        }
        if(question.QuestionType == QuestionTypeConstants.Information)
        {
            return false;
        }
        return question.ReevaluatePrePopulatedAnswers && !question.IsReadOnly;
    });

    string savebuttonText = "Save and continue";
    if (Model.Data.Questions!.All(f=>f.QuestionType == QuestionTypeConstants.Information))
    {
        savebuttonText = "Continue";
    }
}

<span class="govuk-caption-l">@Model.Reference</span>
<h2 class="govuk-heading-m">@Model.SiteName</h2>

<div class="govuk-form-group">
<div class="govuk-!-padding-bottom-6">
<fieldset class="govuk-fieldset" aria-describedby="waste-hint">
<legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
    <h1 class="govuk-heading-l">
        @Html.DisplayTextFor(m => m.Data.PageTitle)
    </h1>
    @if(questionsWithReevaluatedPrePopulatedAnswers)
                {
                    <div class="govuk-inset-text">
                        Questions with a * have a pre-populated answer which will be re-evaluated each time the page is loaded.
                    </div>
                }
</legend>
        
@if (!Model.IsValid && Model.ValidationMessages !=null)
{
    @await Html.PartialAsync("_ValidationSummary",Model.ValidationMessages)
}

@Html.HiddenFor(m => m.Reference)
@Html.HiddenFor(m => m.SiteName)
@Html.HiddenFor(m => m.CounterParty)
@Html.HiddenFor(m => m.LocalAuthority)
@Html.HiddenFor(m => m.ProjectManager)

@if (Model.Data.Questions != null)
{
    var hiddenQuestions = Model.Data.Questions.Where(x => x.HideQuestion).ToList();
    var visibleQuestions = Model.Data.Questions.Where(x => !x.HideQuestion).ToList();
    int index = 0;
    int hiddenCount = 1;
    @foreach (var item in visibleQuestions)
    {
        QuestionScreenQuestion viewModelQuestionScreenQuestion = new QuestionScreenQuestion();
        viewModelQuestionScreenQuestion.QuestionActivityData = item;
        viewModelQuestionScreenQuestion.Index = index;
        viewModelQuestionScreenQuestion.IsValid = Model.IsValid;
        viewModelQuestionScreenQuestion.ValidationMessages = Model.ValidationMessages;

        @await Html.PartialAsync("_QuestionScreenQuestion",viewModelQuestionScreenQuestion);

        @if (item.QuestionType == QuestionTypeConstants.DataTable)
        {
            var tableListForGroup = Model.Data.ToDataTableList(item.DataTable.DisplayGroupId, usedDisplayGroupIds);
            Question dataTableQuestion = new Question()
            {
                Index = index,
                IsValid = Model.Data.IsDataTableValid(tableListForGroup, Model),
                QuestionText = item.Question,
                QuestionId = item.QuestionId,
                QuestionType = item.QuestionType,
                DataTable = tableListForGroup,
                ValidationMessages = Model.ValidationMessages,
                ReevaluatePrePopulatedAnswers = item.ReevaluatePrePopulatedAnswers,
            };

            usedDisplayGroupIds.Add(item.DataTable.DisplayGroupId);
            if (dataTableQuestion.DataTable.Count > 0)
            {
                @await Html.PartialAsync("_DataTableQuestion", dataTableQuestion)
            }
        }
        
        index++;
    }

    if (hiddenQuestions.Any())
    {
        <div class="govuk-accordion" data-module="govuk-accordion" id="accordion-default">

                @foreach (var item in hiddenQuestions)
                {
                    QuestionScreenQuestion viewModelQuestionScreenQuestion = new QuestionScreenQuestion();
                    viewModelQuestionScreenQuestion.QuestionActivityData = item;
                    viewModelQuestionScreenQuestion.Index = index;
                    viewModelQuestionScreenQuestion.IsValid = Model.IsValid;
                    viewModelQuestionScreenQuestion.ValidationMessages = Model.ValidationMessages;

                    <div class="govuk-accordion__section">
                        <div class="govuk-accordion__section-header">
                            <h2 class="govuk-accordion__section-heading">
                                <span class="govuk-accordion__section-button" id="accordion-default-heading-@item.QuestionId">
                                            Additional Information @hiddenCount
                                </span>
                            </h2>
                        </div>
                                <div id="accordion-default-content-@item.QuestionId" class="govuk-accordion__section-content" aria-labelledby="accordion-default-heading-@item.QuestionId">
                            @await Html.PartialAsync("_QuestionScreenQuestion", viewModelQuestionScreenQuestion)
                        </div>
                    </div>
                    index++;
                    hiddenCount++;
                }
        </div>
        }
    }

</fieldset>
</div>
<div class="govuk-button-group">
        <input id="Next" type="submit" value="@savebuttonText" name="Next" class="govuk-button" />
    @Html.ActionLink("Exit to Assessment Summary", "Summary", "Assessment", new { Model.AssessmentId, Model.CorrelationId }, new { @class = "govuk-button govuk-button--secondary" })
    </div>
</div>

<script nonce="@nonceConfig.SiteSetup" src="~/js/site.js"></script>