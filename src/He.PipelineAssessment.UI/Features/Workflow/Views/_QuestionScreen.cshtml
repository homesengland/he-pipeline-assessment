@using Elsa.CustomWorkflow.Sdk
@using He.PipelineAssessment.UI.Features.Workflow.QuestionScreenSaveAndContinue
@using He.PipelineAssessment.UI.Features.Workflow.ViewModels
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model QuestionScreenSaveAndContinueCommand
<div class="govuk-form-group">
    <div class="govuk-!-padding-bottom-6">
        <fieldset class="govuk-fieldset" aria-describedby="waste-hint">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                <h1 class="govuk-heading-l">
                    @Html.DisplayTextFor(m => m.Data.PageTitle)
                </h1>
            </legend>
        
            @if (!Model.IsValid && Model.ValidationMessages !=null)
            {
                @await Html.PartialAsync("_MultiValidationSummary",Model.ValidationMessages)
            }

            @if (Model.Data.QuestionScreenAnswers != null)
            {
                @for (int i = 0; i < Model.Data.QuestionScreenAnswers.Count; i++)
                {
                    @Html.HiddenFor(m => m.Data.QuestionScreenAnswers![i].QuestionId)
                    @Html.HiddenFor(m => m.Data.QuestionScreenAnswers![i].QuestionType)
                    @Html.HiddenFor(m => m.Data.QuestionScreenAnswers![i].QuestionGuidance)
                    @Html.HiddenFor(m => m.Data.QuestionScreenAnswers![i].Title)
                    @Html.HiddenFor(m => m.Data.QuestionScreenAnswers![i].Question)
                    @Html.HiddenFor(m => m.Data.QuestionScreenAnswers![i].QuestionHint)
                    @Html.HiddenFor(m => m.Data.QuestionScreenAnswers![i].DisplayComments)
                    @Html.HiddenFor(m => m.Data.QuestionScreenAnswers![i].Answer)
                    @Html.HiddenFor(m => m.Data.QuestionScreenAnswers![i].IsReadOnly)

                    bool isValidItem = true;
                    if (!Model.IsValid && Model.ValidationMessages != null && Model.ValidationMessages.Errors != null)
                    {
                        if (Model.ValidationMessages.Errors.Any(x => x.PropertyName.Contains("Data.QuestionScreenAnswers[" + i + "]")))
                        {
                            isValidItem = false;
                        }
                    }

                    @if (Model.Data.QuestionScreenAnswers![i].QuestionType == QuestionTypeConstants.TextQuestion)
                    {
                        @await Html.PartialAsync("_MultiTextQuestion",new MultiQuestion()
                        {
                            Index = i,
                            IsValid = isValidItem,
                            Answer = Model.Data.QuestionScreenAnswers[i].Answer,
                            IsReadOnly = Model.Data.QuestionScreenAnswers[i].IsReadOnly,
                            Comments = Model.Data.QuestionScreenAnswers[i].Comments,
                            DisplayComments = Model.Data.QuestionScreenAnswers[i].DisplayComments,
                            Question = Model.Data.QuestionScreenAnswers[i].Question,
                            QuestionGuidance = Model.Data.QuestionScreenAnswers[i].QuestionGuidance,
                            QuestionHint = Model.Data.QuestionScreenAnswers[i].QuestionHint,
                            QuestionId = Model.Data.QuestionScreenAnswers[i].QuestionId,
                            QuestionType = Model.Data.QuestionScreenAnswers[i].QuestionType,
                            Title = Model.Data.QuestionScreenAnswers[i].Title
                        })
                    }

                    @if (Model.Data.QuestionScreenAnswers![i].QuestionType == QuestionTypeConstants.TextAreaQuestion)
                    {
                        @await Html.PartialAsync("_MultiTextAreaQuestion",new MultiQuestion()
                    {
                        Index = i,
                        IsValid = isValidItem,
                        Answer = Model.Data.QuestionScreenAnswers[i].Answer,
            IsReadOnly = Model.Data.QuestionScreenAnswers[i].IsReadOnly,
                        Comments = Model.Data.QuestionScreenAnswers[i].Comments,
                        DisplayComments = Model.Data.QuestionScreenAnswers[i].DisplayComments,
                        Question = Model.Data.QuestionScreenAnswers[i].Question,
                        QuestionGuidance = Model.Data.QuestionScreenAnswers[i].QuestionGuidance,
                        QuestionHint = Model.Data.QuestionScreenAnswers[i].QuestionHint,
                        QuestionId = Model.Data.QuestionScreenAnswers[i].QuestionId,
                        QuestionType = Model.Data.QuestionScreenAnswers[i].QuestionType,
                        Title = Model.Data.QuestionScreenAnswers[i].Title,
                        CharacterLimit = Model.Data.QuestionScreenAnswers[i].CharacterLimit

                        })
                    }
                    @if (Model.Data.QuestionScreenAnswers![i].QuestionType == QuestionTypeConstants.DateQuestion)
                    {
                        var dateModel = new Date();
                        dateModel.Day = Model.Data.QuestionScreenAnswers[i].Date.Day;
                        dateModel.Month = Model.Data.QuestionScreenAnswers[i].Date.Month;
                        dateModel.Year = Model.Data.QuestionScreenAnswers[i].Date.Year;
                        @await Html.PartialAsync("_MultiDateQuestion",new MultiQuestion()
                        {
                            Index = i,
                            IsValid = isValidItem,
                            Answer = Model.Data.QuestionScreenAnswers[i].Answer,
            IsReadOnly = Model.Data.QuestionScreenAnswers[i].IsReadOnly,
                            Comments = Model.Data.QuestionScreenAnswers[i].Comments,
                            DisplayComments = Model.Data.QuestionScreenAnswers[i].DisplayComments,
                            Question = Model.Data.QuestionScreenAnswers[i].Question,
                            QuestionGuidance = Model.Data.QuestionScreenAnswers[i].QuestionGuidance,
                            QuestionHint = Model.Data.QuestionScreenAnswers[i].QuestionHint,
                            QuestionId = Model.Data.QuestionScreenAnswers[i].QuestionId,
                            QuestionType = Model.Data.QuestionScreenAnswers[i].QuestionType,
                            Title = Model.Data.QuestionScreenAnswers[i].Title, 
                            Date = dateModel
                        })
                    }
                    @if (Model.Data.QuestionScreenAnswers![i].QuestionType == QuestionTypeConstants.CurrencyQuestion)
                    {
                        @await Html.PartialAsync("_MultiCurrencyQuestion",new MultiQuestion()
                        {
                            Index = i,
                            IsValid = isValidItem,
                            Answer = Model.Data.QuestionScreenAnswers[i].Answer,
            IsReadOnly = Model.Data.QuestionScreenAnswers[i].IsReadOnly,
                            Comments = Model.Data.QuestionScreenAnswers[i].Comments,
                            DisplayComments = Model.Data.QuestionScreenAnswers[i].DisplayComments,
                            Question = Model.Data.QuestionScreenAnswers[i].Question,
                            QuestionGuidance = Model.Data.QuestionScreenAnswers[i].QuestionGuidance,
                            QuestionHint = Model.Data.QuestionScreenAnswers[i].QuestionHint,
                            QuestionId = Model.Data.QuestionScreenAnswers[i].QuestionId,
                            QuestionType = Model.Data.QuestionScreenAnswers[i].QuestionType,
                            Title = Model.Data.QuestionScreenAnswers[i].Title,
                            Decimal = Model.Data.QuestionScreenAnswers[i].Decimal
                        })
                    }
                    @if (Model.Data.QuestionScreenAnswers![i].QuestionType == QuestionTypeConstants.CheckboxQuestion)
                    {

                        @await Html.PartialAsync("_MultiCheckboxQuestion",new MultiQuestion()
                        {
                            Index = i,
                            IsValid = isValidItem,
                            Answer = Model.Data.QuestionScreenAnswers[i].Answer,
            IsReadOnly = Model.Data.QuestionScreenAnswers[i].IsReadOnly,
                            Comments = Model.Data.QuestionScreenAnswers[i].Comments,
                            DisplayComments = Model.Data.QuestionScreenAnswers[i].DisplayComments,
                            Question = Model.Data.QuestionScreenAnswers[i].Question,
                            QuestionGuidance = Model.Data.QuestionScreenAnswers[i].QuestionGuidance,
                            QuestionHint = Model.Data.QuestionScreenAnswers[i].QuestionHint,
                            QuestionId = Model.Data.QuestionScreenAnswers[i].QuestionId,
                            QuestionType = Model.Data.QuestionScreenAnswers[i].QuestionType,
                            Title = Model.Data.QuestionScreenAnswers[i].Title,
                            Checkbox = new Checkbox()
                            {
                                SelectedChoices = Model.Data.QuestionScreenAnswers[i].Checkbox.SelectedChoices,
                                Choices = Model.Data.QuestionScreenAnswers[i].Checkbox.Choices.Select(x=> new He.PipelineAssessment.UI.Features.Workflow.ViewModels.Choice(){Answer = x.Answer,IsSingle = x.IsSingle}).ToList()
                            }
                            })
                        }
                    @if (Model.Data.QuestionScreenAnswers![i].QuestionType == QuestionTypeConstants.RadioQuestion)
                    {

                        @await Html.PartialAsync("_MultiRadioButtonQuestion",new MultiQuestion()
                        {
                            Index = i,
                            IsValid = isValidItem,
                            Answer = Model.Data.QuestionScreenAnswers[i].Answer,
            IsReadOnly = Model.Data.QuestionScreenAnswers[i].IsReadOnly,
                            Comments = Model.Data.QuestionScreenAnswers[i].Comments,
                            DisplayComments = Model.Data.QuestionScreenAnswers[i].DisplayComments,
                            Question = Model.Data.QuestionScreenAnswers[i].Question,
                            QuestionGuidance = Model.Data.QuestionScreenAnswers[i].QuestionGuidance,
                            QuestionHint = Model.Data.QuestionScreenAnswers[i].QuestionHint,
                            QuestionId = Model.Data.QuestionScreenAnswers[i].QuestionId,
                            QuestionType = Model.Data.QuestionScreenAnswers[i].QuestionType,
                            Title = Model.Data.QuestionScreenAnswers[i].Title,
                            Radio = new Radio()
                            {
                                SelectedAnswer = Model.Data.QuestionScreenAnswers[i].Radio.SelectedAnswer,
                                Choices = Model.Data.QuestionScreenAnswers[i].Radio.Choices.Select(x=> new He.PipelineAssessment.UI.Features.Workflow.ViewModels.Choice(){Answer = x.Answer,IsSingle = x.IsSingle}).ToList()
                            }
                        })
                    }
                }
            }
        </fieldset>
    </div>
    <input id="Next" type="submit" value="Save and continue" name="Next" class="govuk-button" />
</div>