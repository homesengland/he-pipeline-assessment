@using He.PipelineAssessment.UI.Features.Workflow.ViewModels
@model He.PipelineAssessment.UI.Features.Workflow.ViewModels.MultiQuestion
@{
    var itemName = "Data.MultiQuestionActivityData[" + Model.Index + "].MultipleChoice.SelectedChoices";
}

<div class="govuk-form-group">
    <h1 class="govuk-heading-l">
        @Html.DisplayTextFor(m => m.Title)
    </h1>
    <label class="govuk-label govuk-label--m">
        @Html.DisplayTextFor(m => m.Question)
    </label>
    @if (!string.IsNullOrEmpty(Model.QuestionHint))
    {
        <div id="event-name-hint" class="govuk-hint">
            @Model.QuestionHint
        </div>
    }
    
    <div class="govuk-checkboxes" data-module="govuk-checkboxes">
        @{
            var exclusiveChoices = Model.MultipleChoice.Choices.Where(c => c.IsSingle).ToArray();
            var nonExclusiveChoices = Model.MultipleChoice.Choices.Where(c => !c.IsSingle).ToArray();
        }
        @for (int i = 0; i < Model.MultipleChoice.Choices.Count(); i++)
        {
            @Html.HiddenFor(m => Model.MultipleChoice.Choices[i].Answer)
            @Html.HiddenFor(m => Model.MultipleChoice.Choices[i].IsSingle)
        }
        @for (int i = 0; i < nonExclusiveChoices.Count(); i++)
        {
            string answerText = nonExclusiveChoices[i].Answer;
            List<string> selectedChoices = Model.MultipleChoice.SelectedChoices;
            bool isSelected = selectedChoices != null ? selectedChoices.Contains(answerText) : false;

            <div class="govuk-checkboxes__item">
                @*Must use the input tag helper as opposed to htmlcheckbox, as all checkboxes need the same name property, which cannot be overridden easily in HtmlCheckboxFor*@
                <input asp-for="@isSelected"
                   value="@nonExclusiveChoices[i].Answer"
                   name="@itemName"
                   type="checkbox" class="govuk-checkboxes__input">
                @Html.Label(nonExclusiveChoices[i].Answer, answerText, new {@class = "govuk-label govuk-checkboxes__label"})
            </div>
        }
        @for (int i = 0; i < exclusiveChoices.Count(); i++)
        {
            string answerText = exclusiveChoices[i].Answer;
            List<string> selectedChoices = Model.MultipleChoice.SelectedChoices;
            bool isSelected = selectedChoices != null ? selectedChoices.Contains(answerText) : false;

            <div class="govuk-checkboxes__divider">or</div>
            <div class="govuk-checkboxes__item">
                @*Must use the input tag helper as opposed to htmlcheckbox, as all checkboxes need the same name property, which cannot be overridden easily in HtmlCheckboxFor*@
                <input asp-for="@isSelected"
                   value="@exclusiveChoices[i].Answer"
                   name="@itemName"
                   type="checkbox" class="govuk-checkboxes__input" data-behaviour="exclusive">
                @Html.Label(exclusiveChoices[i].Answer, answerText, new {@class = "govuk-label govuk-checkboxes__label"})
            </div>
        }
    </div>

 
    @if (!string.IsNullOrEmpty(Model.QuestionGuidance))
    {
        <br />
        <details class="govuk-details" data-module="govuk-details">
            <summary class="govuk-details__summary">
                <span class="govuk-details__summary-text">
                    Question guidance
                </span>
            </summary>
            <div class="govuk-details__text">
                @Model.QuestionGuidance
            </div>
        </details>
    }
    @if (Model.DisplayComments)
    {
        @await Html.PartialAsync("_MultiComments", new MultiComment(){Index = Model.Index, Comment = Model.Comments})
    }
</div>