@model He.PipelineAssessment.UI.Features.Admin.AssessmentToolManagement.Commands.CreateAssessmentTool.CreateAssessmentToolDto;

@{
    ViewData["Title"] = "Assessment Tools";
    Layout = "_Layout";
}

@Html.ActionLink("Back","AssessmentTool","Admin", null,new{ @class="govuk-back-link"})

<div class="text-center">
    @{
        var nameErrorClass = "";
        var orderErrorClass = "";
        var errorFormClass = "";
        if (Model.ValidationResult != null)
        {
            errorFormClass = !Model.ValidationResult.IsValid ? "govuk-form-group--error" : "";
            var nameInvalid = Model.ValidationResult.Errors.Any(x => x.PropertyName == "Name");
            var orderInvalid = Model.ValidationResult.Errors.Any(x => x.PropertyName == "Order");
            nameErrorClass = nameInvalid ? "govuk-input--error" : "";
            orderErrorClass = orderInvalid ? "govuk-input--error" : "";
        }

        @if (Model.ValidationResult != null && !Model.ValidationResult.IsValid)
        {
            @await Html.PartialAsync("~/Features/Workflow/Views/Shared/_ValidationSummary.cshtml", Model.ValidationResult)
        }
        @using (Html.BeginForm("CreateAssessmentTool", "Admin", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <div class="govuk-form-group @errorFormClass">
                <h3 class="govuk-label-wrapper">
                    @Html.LabelFor(m => Model.CreateAssessmentToolCommand.Name, new { @class = "govuk-label govuk-label--s" })
                </h3>
                @if (Model.ValidationResult != null)
                {
                    @foreach (var error in Model.ValidationResult.Errors.Where(x => x.PropertyName == "Name"))
                    {
                        @Html.ValidationMessageFor(model => Model.CreateAssessmentToolCommand.Order, error.ErrorMessage, new { @class = "govuk-error-message" })
                    }
                }

                @Html.TextBoxFor(m => Model.CreateAssessmentToolCommand.Name, new { @class = $"govuk-input {nameErrorClass}", id = "Name"  })
                <h3 class="govuk-label-wrapper">
                    @Html.LabelFor(m => Model.CreateAssessmentToolCommand.Order, new { @class = "govuk-label govuk-label--s" })
                </h3>
                @if (Model.ValidationResult != null)
                {
                    @foreach (var error in Model.ValidationResult.Errors.Where(x => x.PropertyName == "Order"))
                    {
                        @Html.ValidationMessageFor(model => Model.CreateAssessmentToolCommand.Order, error.ErrorMessage, new { @class = "govuk-error-message" })
                    }
                }
                @Html.TextBoxFor(m => Model.CreateAssessmentToolCommand.Order, new { @class = $"govuk-input {orderErrorClass}", id = "Order" })
            </div>

            <input class="govuk-button" data-module="govuk-button" id="Submit" type="submit" value="Create AssessmentTool" />
        }
    }
</div>