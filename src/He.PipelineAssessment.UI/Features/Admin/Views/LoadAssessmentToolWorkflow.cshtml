@model He.PipelineAssessment.UI.Features.Admin.AssessmentToolManagement.Commands.CreateAssessmentToolWorkflow.CreateAssessmentToolWorkflowDto;

@{
    ViewData["Title"] = "Assessment Tools";
    Layout = "_Layout";
}

@Html.ActionLink("Back", "AssessmentToolWorkflow","Admin",new {Model.AssessmentToolId}, new {@class="govuk-back-link"})
<div class="text-center">
    @{
        var nameErrorClass = "";
        var workflowDefinitionErrorClass = "";
        var errorFormClass = "";
        if (Model.ValidationResult != null)
        {
            errorFormClass = !Model.ValidationResult.IsValid ? "govuk-form-group--error" : "";
            var nameInvalid = Model.ValidationResult.Errors.Any(x => x.PropertyName == "Name");
            var workflowDefinitionInvalid = Model.ValidationResult.Errors.Any(x => x.PropertyName == "WorkflowDefinitionId");
            nameErrorClass = nameInvalid ? "govuk-input--error" : "";
            workflowDefinitionErrorClass = workflowDefinitionInvalid ? "govuk-input--error" : "";
        }

        @if (Model.ValidationResult != null && !Model.ValidationResult.IsValid)
        {
            @await Html.PartialAsync("~/Features/Workflow/Views/Shared/_MultiValidationSummary.cshtml", Model.ValidationResult)
        }
        @using (Html.BeginForm("CreateAssessmentToolWorkflow", "Admin", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <div class="@errorFormClass">
                <div class="govuk-form-group">
                    <h3 class="govuk-label-wrapper">
                        @Html.LabelFor(m => Model.CreateAssessmentToolWorkflowCommand.WorkflowDefinitionId ,new {@class="govuk-label govuk-label--s"} )
                    </h3>
                    @if (Model.ValidationResult != null)
                    {
                        @foreach (var error in Model.ValidationResult.Errors.Where(x => x.PropertyName == "WorkflowDefinitionId"))
                        {
                            @Html.ValidationMessageFor(model => Model.CreateAssessmentToolWorkflowCommand.WorkflowDefinitionId, error.ErrorMessage, new { @class = "govuk-error-message" })
                        }
                    }
                    @Html.TextBoxFor(m => Model.CreateAssessmentToolWorkflowCommand.WorkflowDefinitionId, new {@class = $"govuk-input {workflowDefinitionErrorClass}", id = "WorkflowDefinitionId"})
                </div>
                <div class="govuk-form-group">
                    <h3 class="govuk-label-wrapper">
                        @Html.LabelFor(m => Model.CreateAssessmentToolWorkflowCommand.Name ,new {@class="govuk-label govuk-label--s"} )
                    </h3>
                    @if (Model.ValidationResult != null)
                    {
                        @foreach (var error in Model.ValidationResult.Errors.Where(x => x.PropertyName == "Name"))
                        {
                            @Html.ValidationMessageFor(model => Model.CreateAssessmentToolWorkflowCommand.Name, error.ErrorMessage, new { @class = "govuk-error-message" })
                        }
                    }
                    @Html.TextBoxFor(m => Model.CreateAssessmentToolWorkflowCommand.Name, new {@class = $"govuk-input {nameErrorClass}", id = "Name"})
                </div>
                <div class="govuk-form-group">
                    <h3 class="govuk-label-wrapper">
                        @Html.LabelFor(m => Model.CreateAssessmentToolWorkflowCommand.IsFirstWorkflow ,new {@class="govuk-label govuk-label--s"} )
                    </h3>
                    <div class="govuk-radios">
                        <div class="govuk-radios__item">
                            @Html.RadioButtonFor(m => Model.CreateAssessmentToolWorkflowCommand.IsFirstWorkflow, "True", new { @class = "govuk-radios__input" })
                            <label class="govuk-label govuk-radios__label" for="@Model.CreateAssessmentToolWorkflowCommand.IsFirstWorkflow">Yes</label>
                        </div>
                        <div class="govuk-radios__item">
                            @Html.RadioButtonFor(m => Model.CreateAssessmentToolWorkflowCommand.IsFirstWorkflow, "False", new { @checked = "checked", @class = "govuk-radios__input" })
                            <label class="govuk-label govuk-radios__label" for="@Model.CreateAssessmentToolWorkflowCommand.IsFirstWorkflow">No</label>
                        </div>
                    </div>
                </div>
            </div>

            @Html.Hidden("CreateAssessmentToolWorkflowCommand.AssessmentToolId", Model.AssessmentToolId)
            @Html.Hidden("AssessmentToolId", Model.AssessmentToolId)
            <input class="govuk-button" data-module="govuk-button" id="Submit" type="submit" value="Create Assessment Tool Workflow" />
        }
    }
</div>