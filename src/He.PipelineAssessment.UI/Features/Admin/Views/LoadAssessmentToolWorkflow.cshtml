@model He.PipelineAssessment.UI.Features.Admin.AssessmentToolManagement.Commands.CreateAssessmentToolWorkflow.CreateAssessmentToolWorkflowDto;

@{
    ViewData["Title"] = "Assessment Tools";
    Layout = "_Layout";
}

@Html.ActionLink("Back","AssessmentTool","Admin", null,new{ @class="govuk-back-link"})

<div class="text-center">
    @{
        //var nameErrorClass = "";
        //var orderErrorClass = "";
        //var errorFormClass = "";
        //if (Model.ValidationMessages != null)
        //{
        //    errorFormClass = !Model.ValidationMessages.IsValid ? "govuk-form-group--error" : "";
        //    var nameInvalid = Model.ValidationMessages.Errors.Any(x => x.PropertyName == "Name");
        //    var orderInvalid = Model.ValidationMessages.Errors.Any(x => x.PropertyName == "Order");
        //    nameErrorClass = nameInvalid ? "govuk-input--error" : "";
        //    orderErrorClass = orderInvalid ? "govuk-input--error" : "";
        //}

        //@if (Model.ValidationMessages != null && !Model.ValidationMessages.IsValid)
        //{
        //    @await Html.PartialAsync("~/Features/Workflow/Views/Shared/_MultiValidationSummary.cshtml", Model)
        //}
        @using (Html.BeginForm("CreateAssessmentToolWorkflow", "Admin", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <div class="govuk-form-group">
                <h3 class="govuk-label-wrapper">
                    @Html.LabelFor(m => Model.CreateAssessmentToolWorkflowCommand.WorkflowDefinitionId ,new {@class="govuk-label govuk-label--s"} )
                </h3>
                @Html.TextBoxFor(m => Model.CreateAssessmentToolWorkflowCommand.WorkflowDefinitionId, new {@class="govuk-input"})
            </div>
            <div class="govuk-form-group">
                <h3 class="govuk-label-wrapper">
                    @Html.LabelFor(m => Model.CreateAssessmentToolWorkflowCommand.Name ,new {@class="govuk-label govuk-label--s"} )
                </h3>
                @Html.TextBoxFor(m => Model.CreateAssessmentToolWorkflowCommand.Name, new {@class="govuk-input"})
            </div>
            <div class="govuk-form-group">
                <h3 class="govuk-label-wrapper">
                    @Html.LabelFor(m => Model.CreateAssessmentToolWorkflowCommand.IsFirstWorkflow ,new {@class="govuk-label govuk-label--s"} )
                </h3>
                <div class="govuk-radios">
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(m => Model.CreateAssessmentToolWorkflowCommand.IsFirstWorkflow, "True", new { @class = "govuk-radios__input" })
                        <label class="govuk-label govuk-radios__label" for="@Model.CreateAssessmentToolWorkflowCommand.IsFirstWorkflow">Yes</label>
                    </div>
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(m => Model.CreateAssessmentToolWorkflowCommand.IsFirstWorkflow, "False", new { @checked = "checked", @class = "govuk-radios__input" })
                        <label class="govuk-label govuk-radios__label" for="@Model.CreateAssessmentToolWorkflowCommand.IsFirstWorkflow">No</label>
                    </div>
                </div>
            </div>

            @Html.Hidden("createAssessmentToolWorkflowCommand.AssessmentToolId", @Model.AssessmentToolId)
            <input class="govuk-button" data-module="govuk-button" id="Submit" type="submit" value="Create Assessment Tool Workflow" />
        }
        //@using (Html.BeginForm("CreateAssessmentTool", "Admin", FormMethod.Post))
        //{
        //    @Html.AntiForgeryToken()

        //    <div class="govuk-form-group @errorFormClass">
        //        <h3 class="govuk-label-wrapper">
        //            @Html.LabelFor(m => Model.CreateAssessmentToolCommand.Name, new { @class = "govuk-label govuk-label--s" })
        //        </h3>
        //        @if (Model.ValidationMessages != null)
        //        {
        //            @foreach (var error in Model.ValidationMessages.Errors.Where(x => x.PropertyName == "Name"))
        //            {
        //                @Html.ValidationMessageFor(model => Model.CreateAssessmentToolCommand.Order, error.ErrorMessage, new { @class = "govuk-error-message" })
        //            }
        //        }

        //        @Html.TextBoxFor(m => Model.CreateAssessmentToolCommand.Name, new { @class = $"govuk-input {nameErrorClass}", id = "Name"  })
        //        <h3 class="govuk-label-wrapper">
        //            @Html.LabelFor(m => Model.CreateAssessmentToolCommand.Order, new { @class = "govuk-label govuk-label--s" })
        //        </h3>
        //        @if (Model.ValidationMessages != null)
        //        {
        //            @foreach (var error in Model.ValidationMessages.Errors.Where(x => x.PropertyName == "Order"))
        //            {
        //                @Html.ValidationMessageFor(model => Model.CreateAssessmentToolCommand.Order, error.ErrorMessage, new { @class = "govuk-error-message" })
        //            }
        //        }
        //        @Html.TextBoxFor(m => Model.CreateAssessmentToolCommand.Order, new { @class = $"govuk-input {orderErrorClass}", id = "Order" })
        //    </div>

        //    <input class="govuk-button" data-module="govuk-button" id="Submit" type="submit" value="Create AssessmentTool" />
        //}
    }
</div>