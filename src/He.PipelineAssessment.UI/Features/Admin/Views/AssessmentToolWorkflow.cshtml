@using He.PipelineAssessment.UI.Features.Admin.AssessmentToolManagement.Queries.GetAssessmentToolWorkflows;
@model AssessmentToolWorkflowListDto;

@{
    ViewData["Title"] = "Assessment Tools";
    Layout = "_Layout";
}
<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        @Html.ActionLink("Back","AssessmentTool","Admin", null,new{ @class="govuk-back-link"})
    </div>
    <div class="govuk-grid-column-one-third pull-right">
        @Html.ActionLink("Create Assessment Tool Workflow", "LoadAssessmentToolWorkflow", "Admin", new { Model.AssessmentToolId }, new { @class = "govuk-link" })
    </div>
</div>
<div class="text-center">
    @if (Model.AssessmentToolWorkflowDtos.Any())
    {
        <table class="govuk-table">
            <caption class="govuk-table__caption govuk-table__caption--m">Workflow Definitions for: @Model.AssessmentToolName</caption>
            <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <th scope="col" class="govuk-table__header">WorkflowDefinitionId</th>
                <th scope="col" class="govuk-table__header">Name</th>
                <th scope="col" class="govuk-table__header">IsFirstWorkflow</th>
                <th scope="col" class="govuk-table__header">Update</th>
                <th scope="col" class="govuk-table__header">Delete</th>
            </tr>
            </thead>
            <tbody class="govuk-table__body">
            @foreach (var assessmentToolWorkflow in Model.AssessmentToolWorkflowDtos)
            {
                var nameErrorClass = "";
                var workflowDefinitionErrorClass = "";
                var errorFormClass = "";
                if (assessmentToolWorkflow.ValidationResult != null)
                {
                    errorFormClass = !assessmentToolWorkflow.ValidationResult.IsValid ? "govuk-form-group--error" : "";
                    var nameInvalid = assessmentToolWorkflow.ValidationResult.Errors.Any(x => x.PropertyName == "Name");
                    var workflowDefinitionInvalid = assessmentToolWorkflow.ValidationResult.Errors.Any(x => x.PropertyName == "WorkflowDefinitionId");
                    nameErrorClass = nameInvalid ? "govuk-input--error" : "";
                    workflowDefinitionErrorClass = workflowDefinitionInvalid ? "govuk-input--error" : "";
                }

                @if (assessmentToolWorkflow.ValidationResult != null && !assessmentToolWorkflow.ValidationResult.IsValid)
                {
                    @await Html.PartialAsync("~/Features/Workflow/Views/Shared/_MultiValidationSummary.cshtml", assessmentToolWorkflow.ValidationResult)
                }
                <tr class="govuk-table__row @errorFormClass">
                    @using (Html.BeginForm("UpdateAssessmentToolWorkflow", "Admin", FormMethod.Post))
                    {
                        <td class="govuk-table__cell">
                            <div class="govuk-form-group">
                                <input type="text" value="@assessmentToolWorkflow.WorkflowDefinitionId" name="UpdateAssessmentToolWorkflowCommand.WorkflowDefinitionId" class="govuk-input @workflowDefinitionErrorClass"/>
                                @if (assessmentToolWorkflow.ValidationResult != null)
                                {
                                    @foreach (var error in assessmentToolWorkflow.ValidationResult.Errors.Where(x => x.PropertyName == "WorkflowDefinitionId"))
                                    {
                                        @Html.ValidationMessageFor(model => assessmentToolWorkflow.WorkflowDefinitionId, error.ErrorMessage, new { @class = "govuk-error-message" })
                                    }
                                }
                            </div>
                        </td>
                        <td class="govuk-table__cell">
                            <div class="govuk-form-group">
                                <input type="text" value="@assessmentToolWorkflow.Name" name="UpdateAssessmentToolWorkflowCommand.Name" class="govuk-input @nameErrorClass"/>
                                @if (assessmentToolWorkflow.ValidationResult != null)
                                {
                                    @foreach (var error in assessmentToolWorkflow.ValidationResult.Errors.Where(x => x.PropertyName == "Name"))
                                    {
                                        @Html.ValidationMessageFor(model => assessmentToolWorkflow.Name, error.ErrorMessage, new { @class = "govuk-error-message" })
                                    }
                                }
                            </div>
                        </td>
                        <td class="govuk-table__cell">
                            <div class="govuk-radios--inline">
                                <div class="govuk-radios__item">
                                    @Html.RadioButton("UpdateAssessmentToolWorkflowCommand.IsFirstWorkflow", "True", assessmentToolWorkflow.IsFirstWorkflow, new { @class = "govuk-radios__input" })
                                    <label class="govuk-label govuk-radios__label" for="@assessmentToolWorkflow.IsFirstWorkflow">Yes</label>
                                </div>
                                <div class="govuk-radios__item">
                                    @Html.RadioButton("UpdateAssessmentToolWorkflowCommand.IsFirstWorkflow", "False", !assessmentToolWorkflow.IsFirstWorkflow, new { @class = "govuk-radios__input" })
                                    <label class="govuk-label govuk-radios__label" for="@assessmentToolWorkflow.IsFirstWorkflow">No</label>
                                </div>
                            </div>
                        </td>
                        <td class="govuk-table__cell">
                            @Html.AntiForgeryToken()
                            @Html.Hidden("UpdateAssessmentToolWorkflowCommand.Id", assessmentToolWorkflow.Id)
                            @Html.Hidden("UpdateAssessmentToolWorkflowCommand.AssessmentToolId", assessmentToolWorkflow.AssessmentToolId)
                            <input class="govuk-button govuk-!-margin-0" data-module="govuk-button" id="Update" type="submit" value="Update"/>
                        </td>
                    }
                    <td class="govuk-table__cell">
                        @using (Html.BeginForm("DeleteAssessmentToolWorkflow", "Admin", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Hidden("assessmentToolWorkflowId", assessmentToolWorkflow.Id)
                            @Html.Hidden("assessmentToolId", assessmentToolWorkflow.AssessmentToolId)
                            <input class="govuk-button govuk-!-margin-0 govuk-button--warning" data-module="govuk-button" id="Delete" type="submit" value="Delete"/>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
</div>