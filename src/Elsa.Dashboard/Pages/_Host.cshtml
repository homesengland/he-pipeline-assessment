@page "/"
@using Microsoft.Extensions.Configuration
@inject NonceConfig nonceConfig
@inject IConfiguration Configuration
@{
    string serverUrl = Configuration["Urls:ElsaServer"];
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Elsa Workflows</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/images/favicon-16x16.png">
    <link rel="stylesheet" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/fonts/inter/inter.css">
    <link rel="stylesheet" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/elsa-workflows-studio.css">
    <script nonce ="@nonceConfig.ElsaSetup"  src="/_content/Elsa.Designer.Components.Web/monaco-editor/min/vs/loader.js"></script>
    <script nonce ="@nonceConfig.ElsaSetup"  type="module" src="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/elsa-workflows-studio.esm.js"></script>
    <script nonce ="@nonceConfig.ElsaSetup"  type="module" src="/static/build/custom-elsa.esm.js"></script>
    <style>
      body {
        color: #2c3e50;
        background: #ecf0f1;
        padding: 0 1em 1em;
      }

      h1 {
        margin: 0;
        line-height: 2;
        text-align: center;
      }

      h2 {
        margin: 0 0 0.5em;
        font-weight: normal;
      }

      input {
        position: absolute;
        opacity: 0;
        z-index: -1;
      }

      .row {
        display: flex;
      }
      .row .col {
        flex: 1;
      }
      .row .col:last-child {
        margin-left: 1em;
      }

      /* Accordion styles */
      .tabs {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 4px -2px rgba(0, 0, 0, 0.5);
      }

      .tab {
        width: 100%;
        color: white;
        overflow: hidden;
      }
      .tab-label {
        display: flex;
        justify-content: space-between;
        padding: 1em;
        background: #2c3e50;
        font-weight: bold;
        cursor: pointer;
        /* Icon */
      }
      .tab-label:hover {
        background: #1a252f;
      }
      .tab-label::after {
        content: "‚ùØ";
        width: 1em;
        height: 1em;
        text-align: center;
        transition: all 0.35s;
      }
      .tab-content {
        max-height: 0;
        padding: 0 1em;
        color: #2c3e50;
        background: white;
        transition: all 0.35s;
      }
      .tab-close {
        display: flex;
        justify-content: flex-end;
        padding: 1em;
        font-size: 0.75em;
        background: #2c3e50;
        cursor: pointer;
      }
      .tab-close:hover {
        background: #1a252f;
      }

      input:checked + .tab-label {
        background: #1a252f;
      }
      input:checked + .tab-label::after {
        transform: rotate(90deg);
      }
      input:checked ~ .tab-content {
        max-height: 100vh;
        padding: 1em;
      }
    </style>
</head>
<body>
<elsa-studio-root server-url="@serverUrl" monaco-lib-path="_content/Elsa.Designer.Components.Web/monaco-editor/min">
    <elsa-studio-dashboard></elsa-studio-dashboard>
</elsa-studio-root>
<script nonce="@nonceConfig.ElsaSetup">
        var elsaStudioRoot = document.querySelector('elsa-studio-root');

        function MyCustomPlugin(elsaStudio) {
            var eventBus = elsaStudio.eventBus;

            eventBus.on('activity-design-displaying',
                e => {
                    if (e.activityModel.type == "MultipleChoiceQuestion" ||
                        e.activityModel.type == "SingleChoiceQuestion" ||
                        e.activityModel.type == "DateQuestion" ||
                    e.activityModel.type == "TextQuestion" ||
                    e.activityModel.type == "CurrencyQuestion" ||
                    e.activityModel.type == "QuestionScreen")
                    e.outcomes = e.outcomes.filter(x => x !== 'Default' && x !== 'Done');
                });
            };

        function getOrCreateProperty(activity, name, defaultExpression, defaultSyntax) {
            var property = activity.properties.find(function(x) { return x.name == name; });
            if (!property) {
                var expressions = {};
                var syntax = defaultSyntax ? defaultSyntax() : undefined;
                if (!syntax)
                    syntax = 'Literal';
                expressions[syntax] = defaultExpression ? defaultExpression() : undefined;
                property = { name: name, expressions: expressions, syntax: null };
                activity.properties.push(property);
            }

            return property;
}

        function MyCustomInputDriver(elsaStudio, elementName) {
          console.log("creating input driver for " + elementName)
            this.display = (activity, property) => {
              console.log('Logging Display');
              console.log(this.display);
                var prop = (0, getOrCreateProperty)(activity, property.name);
                var multichoice = document.createElement(elementName);
                multichoice.activityModel = activity;
                multichoice.propertyDescriptor = property;
                multichoice.propertyModel = prop;
                console.log(activity);
                console.log(property);
                console.log(prop);
                return multichoice;
            }
        }

        elsaStudioRoot.addEventListener('initializing', e => {
            var elsaStudio = e.detail;
            elsaStudio.pluginManager.registerPlugin(MyCustomPlugin);
            elsaStudio.propertyDisplayManager.addDriver('multiChoice-record-builder', () => new MyCustomInputDriver(elsaStudio, 'elsa-multichoice-records-property'));
            elsaStudio.propertyDisplayManager.addDriver('singleChoice-record-builder', () => new MyCustomInputDriver(elsaStudio, 'elsa-singlechoice-records-property'));
            elsaStudio.propertyDisplayManager.addDriver('question-builder', () => new MyCustomInputDriver(elsaStudio, 'elsa-multiquestion-property'));

        });
</script>
</body>
</html>
