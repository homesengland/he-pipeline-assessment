@page "/"
@using Microsoft.Extensions.Configuration
@inject NonceConfig nonceConfig
@inject IConfiguration Configuration
@{
    string serverUrl = Configuration["Urls:ElsaServer"];
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Elsa Workflows</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/images/favicon-16x16.png">
    <link rel="stylesheet" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/fonts/inter/inter.css">
    <link rel="stylesheet" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/elsa-workflows-studio.css">
    <link rel="stylesheet" href="/css/site.css">
    <script nonce ="@nonceConfig.ElsaSetup"  src="/_content/Elsa.Designer.Components.Web/monaco-editor/min/vs/loader.js"></script>
    <script nonce ="@nonceConfig.ElsaSetup"  type="module" src="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/elsa-workflows-studio.esm.js"></script>
    <script nonce ="@nonceConfig.ElsaSetup"  type="module" src="/static/build/custom-elsa.esm.js"></script>
    <style>
    </style>
</head>
<body>
<elsa-studio-root server-url="@serverUrl" monaco-lib-path="_content/Elsa.Designer.Components.Web/monaco-editor/min">
    <elsa-studio-dashboard></elsa-studio-dashboard>
</elsa-studio-root>
<script nonce="@nonceConfig.ElsaSetup">
  var elsaStudioRoot = document.querySelector('elsa-studio-root');

  function MyCustomPlugin(elsaStudio) {
    var eventBus = elsaStudio.eventBus;

    eventBus.on('activity-design-displaying',
      e => {
        if (e.activityModel.type == "QuestionScreen" || e.activityModel.type == "CheckYourAnswersScreen")
          e.outcomes = e.outcomes.filter(x => x !== 'Default' && x !== 'Done' );
      });
  };

  function getOrCreateProperty(activity, name, defaultExpression, defaultSyntax) {
    var property = activity.properties.find(function(x) { return x.name == name; });
    if (!property) {
      var expressions = {};
      var syntax = defaultSyntax ? defaultSyntax() : undefined;
      if (!syntax)
        syntax = 'Literal';
      expressions[syntax] = defaultExpression ? defaultExpression() : undefined;
      property = { name: name, expressions: expressions, syntax: null };
      activity.properties.push(property);
    }

    return property;
  }

  function MyCustomInputDriver(elsaStudio, elementName) {
    this.display = (activity, property) => {
      var prop = (0, getOrCreateProperty)(activity, property.name);
      var questionActivity = document.createElement(elementName);
      questionActivity.activityModel = activity;
      questionActivity.propertyDescriptor = property;
      questionActivity.propertyModel = prop;
      return questionActivity;
    }
  }

  elsaStudioRoot.addEventListener('initializing', e => {
    var elsaStudio = e.detail;
    elsaStudio.pluginManager.registerPlugin(MyCustomPlugin);
    elsaStudio.propertyDisplayManager.addDriver('question-builder', () => new MyCustomInputDriver(elsaStudio, 'elsa-question-screen'));

  });
</script>
</body>
</html>
